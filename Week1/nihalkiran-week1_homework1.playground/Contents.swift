import UIKit

/**
  1- Elimizde sadece harflerden oluşan (noktalama işareti veya sayılar yok) uzun karakterler olsun. Bu karekterlerin içinde bazı hafrflerin tekrar edeceğini düşünün. Mesela 'a ' harfi 20 farklı yerde geçiyor. Bir fonksiyon ile verilen parametre değerine eşit ve daha fazla bulunan harfler silinecektir. Sonra geriye kalan string ekrana yazdırılacaktır. Not boşluklar sayılmayacak:)
  
  Örnek string: "aaba kouq bux"
  Tekrar sayısı 2 verildiğinde : a,b,u silinmeli ve ekrana "koq x" yazmalı
  Tekrar sayısı 3 verildiğinde : a silinmeli ve ekrana "b kouq bux"
  tekrar sayısı 4 verildiğinde  :  hiç bir harf silinmemeli aynı stringi yazmalı
  
  Not: String ve tekrar sayısını parametre olarak alsın. func (myString, count)
*/

func findSimilar (chars: String, repeatNum: Int) -> String {
    
    // Creating a string of type var as the same characters:
    var resultChars = chars
    
    // To find the number of characters:
    for char in chars {
        var num = 0
        for i in 0..<chars.count {
            if char == Array(chars)[i] && char != " " {
                num += 1
            }
        }
        
        // When the number of character is greater than or equal to the desired number of repeats, subtract that character:
        if num >= repeatNum {
            resultChars = (resultChars.components(separatedBy: "\(char)")).joined(separator: "")
        }
    }
    
    return resultChars
}

// Print the result:
print(findSimilar(chars: "aaba kouq bux", repeatNum: 2))

/**
 Output:
 koq x
 */


/**
 2 - Elimizde uzun bir cümle olsun, Bazı kelimeler tekrar edecek bir cümle düşünün. İstediğimiz ise, hangi kelimeden kaç tane kullanıldığını bulmanız.
  string = "merhaba nasılsınız . iyiyim siz nasılsınız . bende iyiyim . "
*/

func wordNum (sentence: String) {
    
    // Separating spaces from each word in the sentence and creating an array of words:
    var words = sentence.components(separatedBy: " ")
    
    // Deleting independent and adjacent points in a sentence:
    for i in 0..<words.count {
        words[i] = (words[i].components(separatedBy: ".")).joined(separator: "")
    }
    
    // Removing non-word items from an array:
    for word in words {
        if word == "", let index = words.firstIndex(of: word) {
            words.remove(at: index)
        }
    }
    
    // Creating a set from an array: (Each element in the set has one.)
    let setWords = Set(words)
    
    // To find how many items in the set are in the array:
    for setWord in setWords {
        var num = 0
        for word in words {
            if setWord == word {
                num += 1
            }
        }
        
        // Print the result:
        print("\(setWord) : \(num) adet")
    }
}

wordNum(sentence: "merhaba nasılsınız. iyiyim siz nasılsınız. ben de iyiyim. ")

 /**
 Output:
 merhaba : 1 adet
 iyiyim : 2 adet
 nasılsınız : 2 adet
 siz : 1 adet
 de : 1 adet
 ben : 1 adet
 */


// https://projecteuler.net/archives
/**
 1. Multiples of 3 and 5
 If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

 Find the sum of all the multiples of 3 or 5 below 1000.
 */

/**
 The function takes divide and divisors as parameters. The divisor parameters for this question are 3 and 5 by default.
 Different values can be given for different divisors.
 */

func divideSum (divide: Int, firstDivisor: Int = 3, secondDivisor: Int = 5) -> Int {
    
    // The requested total value is set to 0 in var type by default.
    var sum: Int = 0
    
    // Every value that is divided exactly is added to the total.
    for num in 0..<divide {
        if num % firstDivisor == 0 || num % secondDivisor == 0 {
            sum += num
        }
    }
    return sum
}

// Print the result:
print(divideSum(divide: 1000)) // The divisor parameters are 3 and 5 by default. output: 233168
print(divideSum(divide: 10, firstDivisor: 2, secondDivisor: 7)) // output: 27


/**
 2. Even Fibonacci numbers
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */

func fibonacci() -> Int {
    
    // The first two value assignments for Fibonacci:
    var number1 = 0, number2 = 1
    
    // The sum of the double values requested in the question:
    var sumNumber: Int = 0
    
    // For the Fibonacci series up to 4000000:
    while number2 < 4000000 {
        let temp = number1 + number2
        number1 = number2
        number2 = temp
        
        // To sum the evens in the series into the sum variable:
        if number2 % 2 == 0 {
            sumNumber += number2
        }
    }
    return sumNumber
}

// Print the result:
print(fibonacci()) // 4613732


/**
 3. Largest prime factor
 The prime factors of 13195 are 5, 7, 13 and 29.

 What is the largest prime factor of the number 600851475143 ?
 */

func primeFactors(number: Int) {
    
    // Creating the number of type var:
    var num = number
    
    // Array into which prime factors will be added:
    var nums: [Int] = []
    
    let maxNum = sqrt(Double(num))
    
    // Loop to find prime factors:
    for i in 2...Int(maxNum) {
        if num % i == 0 {
            num /= i
            nums.append(i)
        }
    }
    
    // max prime factor:
    print(nums.max() ?? 0)
}

primeFactors(number: 13195) // output: 29
primeFactors(number: 600851475143) // output: 6857


/**
 4. Largest palindrome product
 A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

 Find the largest palindrome made from the product of two 3-digit numbers.
 */


func maxPalindrom() {
    
    // Creating a variable to hold the multiplication result:
    var palindrom: Int
    
    // The array to hold the palindrome numbers resulting from the multiplications:
    var palindromArr: [Int] = []
    
    // Loops to find palindrome numbers:
    for i in 900...999 {
        for j in 900...999 {
            palindrom = i*j
            
            // If the product is the same in reverse, add it to the array:
            if String(palindrom) == String(String(palindrom).reversed()) {
                palindromArr.append(palindrom)
                
            }
        }
    }
    
    // Printing the max in the array:
    print(palindromArr.max() ?? 0)
    
}

maxPalindrom() // output: 906609


/**
 5. Smallest multiple
 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

 What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */

// Function that calculates GCD:
func gcd(_ n1: Int, _ n2: Int) -> Int {
    if (n1 % n2) != 0 {
        return gcd(n2, (n1 % n2))
    } else {
        return n2
    }
}

// Function to find the smallest number divisible by numbers in the given range:
func minDivide(minDivisor: Int = 1, maxDivisor: Int = 20) {
    var sum = 1
    for i in minDivisor...maxDivisor {
        sum = (sum * i) / gcd(sum, i)
    }
    
    // Print the total
    print(sum)
}

minDivide(minDivisor: 1, maxDivisor: 20) // Output: 232792560


/*
let dTime = Date()
print("\(dTime.timeIntervalSinceNow * -1)")
*/
